type Ipnft @entity {
  id: ID! #tokenId
  owner: Bytes! # address
  createdAt: BigInt!
  tokenURI: String!
  symbol: String
  listings: [Listing!] @derivedFrom(field: "ipnft")
  readers: [CanRead!] @derivedFrom(field: "ipnft")
  fractionalized: [Fractionalized!] @derivedFrom(field: "ipnft")
}

type Fractionalized @entity {
  id: ID! # fractionId hash of original owner + tokenId
  ipnft: Ipnft!
  createdAt: BigInt!
  #txHash: Bytes
  agreementCid: String! #IPFS CID string of FAM Agreement
  originalOwner: Bytes! # address of the issuer
  #initialAmount: BigInt! # initial amount of tokens
  totalIssued: BigInt! #the highest amount of fractions issued, this can be raised by the owner
  circulatingSupply: BigInt! #the amount of unburnt fractions
  erc20address: Bytes! #address of the underlying erc20 token
  symbol: String!
  tokenName: String!
  paymentToken: Bytes #address ERC20 Token
  paidPrice: BigInt #the price paid for the original ipnft
  claimedShares: BigInt! # the amount of shares that have already been claimed. This needs to have a fulfilledListingId to be set
  fractions: [Fraction!] @derivedFrom(field: "fractionalizedIpfnt")
}

type Fraction @entity {
  id: ID! # fractionId + owner address
  fractionalizedIpfnt: Fractionalized!
  balance: BigInt! # Token balance of the owner
  owner: Bytes! #Address of the token owner
  agreementSigned: Boolean! #if the owner has signed the agreement
  agreementSignature: Bytes #the agreement signature, to be reused for other operations
}

type Listing @entity {
  id: ID!
  ipnft: Ipnft!
  creator: Bytes! #address
  tokenAmount: BigInt! #the amount of this token to sell, usually 1
  paymentToken: Bytes! #address ERC20 Token
  askPrice: BigInt!
  createdAt: BigInt!
  unlistedAt: BigInt
  purchasedAt: BigInt
  buyer: Bytes #address
  allowed: [Allowed!] @derivedFrom(field: "listing")
}

type CanRead @entity {
  id: ID! #keccak(tokenId,address)
  ipnft: Ipnft!
  reader: Bytes! #address
  until: BigInt
}

type Allowed @entity {
  id: ID! #listingid-account
  account: Bytes!
  listing: Listing!
  allowed: Boolean!
}

type Reservation @entity {
  id: ID! #reservationId will be future tokenId
  owner: Bytes! #address
  uri: String
  createdAt: BigInt!
}

enum MintpassStatus {
  DEFAULT
  REDEEMED
  REVOKED
}

type Mintpass @entity {
  id: ID! #tokenId
  owner: Bytes! #address
  createdAt: BigInt!
  status: MintpassStatus
}
