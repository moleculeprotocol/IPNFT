type FracIpnft @entity {
  id: ID! #fractionId - hash of original Owner + collection address + tokenId
  originalOwner: Bytes! #address
  createdAt: BigInt!
  ipnftCollection: Bytes #address of the collection
  ipnftId: ID # tokenID of original Ipnft
  agreementCid: String #IPFS CID string of FAM Agreement
  totalIssued: BigInt! #the amount of fractions issued; can be increased later
  circulatingSupply: BigInt! #the amount of fractions that are in circulation
  claimedShares: BigInt! # the amount of shares that have already been claimed. This needs to have a fulfilledListingId to be set
  paymentToken: Bytes #address ERC20 Token
  paidPrice: BigInt #the price paid for the original ipnft
  baskets: [FracBasket!] @derivedFrom(field: "fracIpnft")
}

# Name tbd
type FracBasket @entity {
  id: ID! # fractionId + owner address
  fracIpnft: FracIpnft!
  balance: BigInt! # Token balance of the owner
  owner: Bytes! #Address of the token owner
  agreementSigned: Boolean! #if the owner has signed the agreement
}
