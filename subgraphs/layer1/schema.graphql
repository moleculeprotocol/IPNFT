type Ipnft @entity {
  id: ID! #tokenId
  owner: Bytes! # address
  originalOwner: Bytes! # address of original minter
  createdAt: BigInt!
  tokenURI: String!
  listings: [Listing!] @derivedFrom(field: "ipnft")
  symbol: String
  readers: [CanRead!] @derivedFrom(field: "ipnft")
  fracInit: FracInit @derivedFrom(field: "ipnft")
}

type FracInit @entity {
  id: ID! # fractionId
  txHash: Bytes
  emitter: Bytes! # address
  createdAt: BigInt!
  ipnft: Ipnft!
  collection: Bytes! # address of collection
  initialAmount: BigInt! # initial amount of tokens
}

type Listing @entity {
  id: ID!
  ipnft: Ipnft!
  creator: Bytes! #address
  tokenAmount: BigInt! #the amount of this token to sell, usually 1
  paymentToken: Bytes! #address ERC20 Token
  askPrice: BigInt!
  createdAt: BigInt!
  unlistedAt: BigInt
  purchasedAt: BigInt
  buyer: Bytes #address
  allowed: [Allowed!] @derivedFrom(field: "listing")
}

type CanRead @entity {
  id: ID! #keccak(tokenId,address)
  ipnft: Ipnft!
  reader: Bytes! #address
  until: BigInt
}

type Allowed @entity {
  id: ID! #listingid-account
  account: Bytes!
  listing: Listing!
  allowed: Boolean!
}

type Reservation @entity {
  id: ID! #reservationId will be future tokenId
  owner: Bytes! #address
  uri: String
  createdAt: BigInt!
}

enum MintpassStatus {
  DEFAULT
  REDEEMED
  REVOKED
}

type Mintpass @entity {
  id: ID! #tokenId
  owner: Bytes! #address
  createdAt: BigInt!
  status: MintpassStatus
}
